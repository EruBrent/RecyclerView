// DlgAlarmInfoInterface.cpp : implementation file
//

#include "stdafx.h"
#include "DlgAlarmInfoInterface.h"
#include "DlgAlarmFilter.h"
#include "DlgVideoShow.h"
#include "AlarmLogMgr.h"
#include "DlgVideoShow_OneUnit.h"
#include "DlgAlarmPictureShow.h"
#include "Global/CGProtocol.h"

#define IDC_D_BTN 10000

extern BOOL						Dlg_AlarmInfoState;
extern CWnd*					tempWnd;
extern CPictureEx*				m_pictureGif;
extern CDlgVideoShow*			g_pDlgVideoShow;
extern CDlgVideoShow_OneUnit*	s_pDlgOneUnit;
int								buttonQuantity;
int								DlgAlarmInfoInterface::broadcastAlarmInfo;
int								DlgAlarmInfoInterface::currentButtonID;
BOOL							DlgAlarmInfoInterface::alarmVideoAttributes =FALSE;
string							DlgAlarmInfoInterface::alarmVideoIP;
HostInfo*						DlgAlarmInfoInterface::hostInfo;
ALARMLOGINFO					DlgAlarmInfoInterface::info;
vector<ALARMLOGINFO>			DlgAlarmInfoInterface::tempSave;
DlgAlarmInfoInterface*			s_pDlgAlarmInfo;
extern int ShowDlgVideoShow_OneUnit(BOOL bShow, CWnd* pParent, IPCameraLoginInfo *pIpcInfo);
/*------------------------------我的名字叫分割线----------------------------------------*/
IMPLEMENT_DYNAMIC(DlgAlarmInfoInterface, CDialog)

void ShowDlgAlarmInfoInterface(BOOL bShow, CWnd* pParent)
{
	//s_pDlgAlarmInfo = NULL;
	if (!s_pDlgAlarmInfo)
	{
		s_pDlgAlarmInfo = new DlgAlarmInfoInterface(pParent);	
	}
	if(!s_pDlgAlarmInfo->m_hWnd)
		s_pDlgAlarmInfo->Create(DlgAlarmInfoInterface::IDD, pParent);

	s_pDlgAlarmInfo->ShowWindow(bShow ? SW_SHOW : SW_HIDE);

}

DlgAlarmInfoInterface::DlgAlarmInfoInterface(CWnd* pParent /*=NULL*/)
	: CDialog(DlgAlarmInfoInterface::IDD, pParent)
{
	buttonQuantity = 1;
	pictureState = false;
	
}

DlgAlarmInfoInterface::~DlgAlarmInfoInterface()
{
	alarmVideoAttributes =FALSE;
	/*delete s_pDlgAlarmInfo;
	s_pDlgAlarmInfo = NULL;*/
}

void DlgAlarmInfoInterface::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_ALARM_LIST, (CWnd&)alarmList);
}


BEGIN_MESSAGE_MAP(DlgAlarmInfoInterface, CDialog)
	ON_WM_CLOSE()
	ON_WM_PAINT()
	ON_WM_SYSCOMMAND()
	//ON_COMMAND_RANGE(IDC_D_BTN, IDC_D_BTN +10, onButtonClick)
	ON_STN_CLICKED(IDC_PIC_DOWN, &DlgAlarmInfoInterface::OnStnClickedPicDown)
	ON_STN_CLICKED(IDC_previousPicture, &DlgAlarmInfoInterface::OnStnClickedpreviouspicture)
	ON_BN_CLICKED(IDC_confirm, &DlgAlarmInfoInterface::OnBnClickedconfirm)
	ON_BN_CLICKED(IDC_WATCH_ALARM_VIDEO, &DlgAlarmInfoInterface::OnBnClickedWatchAlarmVideo)
	ON_NOTIFY(NM_CLICK, IDC_ALARM_LIST, &DlgAlarmInfoInterface::OnNMClickAlarmList)
//	ON_STN_CLICKED(IDC_sencePicture, &DlgAlarmInfoInterface::OnStnClickedsencepicture)
//	ON_STN_CLICKED(IDC_AlarmPicture1, &DlgAlarmInfoInterface::OnStnClickedAlarmpicture1)
END_MESSAGE_MAP()



BOOL DlgAlarmInfoInterface::OnInitDialog()
{
	CDialog::OnInitDialog();
	/*alarmList = ((CListCtrl*)GetDlgItem(IDC_ALARM_LIST));
	alarmList->SetExtendedStyle(LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP
		|LVS_EX_GRIDLINES|LVS_EX_ONECLICKACTIVATE|LVS_EX_FLATSB);

	alarmList->InsertColumn( 0, _T("区域"), LVCFMT_LEFT, 50 );
	alarmList->InsertColumn( 1, _T("单元"), LVCFMT_LEFT, 50 );
	alarmList->InsertColumn( 2, _T("主机"), LVCFMT_LEFT, 50 );
	alarmList->InsertColumn( 3, _T("时间"), LVCFMT_LEFT, 100 );*/
	initPictureInfo();
	info.picturePath = "D:\\SVN\\server_alarm__\\bin\\A1_40_2016-08-28_17-58-54";
	
	
	// TODO:  在此添加额外的初始化
	//if (tempSave.size()!=0)
	//{
	//	info = *tempSave.begin();
	//}
	//else
	//	SetAlarmData();
	//
	//InitData();
	//alarmVideoAttributes =TRUE;
	//

	return TRUE;  
	
}

/*------------------------------我的名字叫分割线----------------------------------------*/
string DlgAlarmInfoInterface::getFolderPath(string folderName)
{
	char cSearchCond[MAX_PATH]; //TCHAR 
	GetModuleFileName(NULL, cSearchCond, MAX_PATH);
	(_tcsrchr(cSearchCond, _T('\\')))[1] = 0;
	strcat(cSearchCond,folderName.c_str());
	return cSearchCond;
	
}

/*------------------------------我的名字叫分割线----------------------------------------*/
void DlgAlarmInfoInterface::getFloderImage(string imagePath)
{
	m_pDir = opendir(imagePath.c_str());
	if(m_pDir){
		for (int k =0; k<2;k++)
			m_pEnt=readdir(m_pDir);
		GetNextBigImg();
	}
	
		
	if(!prevPict.empty()){
			
			ShowTheImgSet(prevPict.at(0));
			ShowTheImgSet(prevPict.at(1));
			ShowTheImgSet(prevPict.at(2));
			ShowTheImgSet(prevPict.at(3));
			pictureLocation = 0;
	}
	
}

/*------------------------------我的名字叫分割线----------------------------------------*/
void DlgAlarmInfoInterface::ShowTheImgSet(PICTUREINFORMATION pictinfo)
{
	if( m_bitmap.m_hObject != NULL )//判断
		m_bitmap.DeleteObject();
	CImage img;
	img.Load(pictinfo.path.c_str());
	HBITMAP hbmp = img.Detach();

	if( hbmp == NULL )
		return ;

	m_bitmap.Attach( hbmp );
	DIBSECTION ds;
 	BITMAPINFOHEADER &bminfo = ds.dsBmih;
 	m_bitmap.GetObject( sizeof(ds), &ds );
	CRect rect;
	GetDlgItem(pictinfo.pictControlID)->GetWindowRect(&rect);
	ScreenToClient(&rect);
//	ScreenToClient(&pictinfo.size);
	GetDlgItem(pictinfo.pictControlID)->MoveWindow(pictinfo.size,TRUE);
	
		pictureState = true;
		pictureId =pictinfo.pictControlID;
		::RedrawWindow(this->m_hWnd,pictinfo.size,NULL,RDW_INVALIDATE | RDW_UPDATENOW | RDW_ERASE);
		//Invalidate(FALSE);

}

/*------------------------------我的名字叫分割线----------------------------------------*/
ALARMLOGINFO DlgAlarmInfoInterface::getCurrentData(string FloderName)
{

	CTime  currentTime = CTime::GetCurrentTime();
	string timeFormat = currentTime.Format(_T("%Y-%m-%d %H:%M:%S"));
	string tmpF = currentTime.Format(_T("%Y-%m-%d_%H-%M-%S"));
	FloderName += tmpF;
	DWORD dwAttr=GetFileAttributes(getFolderPath(FloderName).c_str());
	//若文件夹不存在，创建文件夹
	if(dwAttr==0xFFFFFFFF)
		CreateDirectory(getFolderPath(FloderName).c_str(),NULL);
	 
	 string path = getFolderPath(FloderName);
 	 info.happenTime = timeFormat;
	 info.happenArea = hostInfo->strAreaName;
	 info.happenUnit = hostInfo->strUnitName;
	 info.happenHost = hostInfo->strHostName;
	 info.picturePath = path;
	 return info;
}





/*------------------------------我的名字叫分割线----------------------------------------*/

void DlgAlarmInfoInterface::OnBnClickedconfirm()
{
	CString SO;
	CString tempOfficer;
	CString tempRemark;
	m_SecurityOfficer->GetWindowText(tempOfficer);
	
	CG_ALARMINFO_SHOW infoshow;
	vector<CG_ALARMINFO_SHOW> temp_show;
	Dlg_AlarmInfoState = FALSE;
	/*添加安全员等信息*/
	for (vector<ALARMLOGINFO>::iterator it =tempSave.begin();it!=tempSave.end();it++)
	{
		if (it->buttonID == currentButtonID)
		{
			it->securityOfficer = tempOfficer;
			it->remark = tempRemark;
			info = *it;
			break;
		}
	}

	infoshow.m_strTime = info.happenTime;
	infoshow.m_strFrom = info.happenArea;
	infoshow.m_strFrom += "_";
	infoshow.m_strFrom += info.happenUnit;
	infoshow.m_strFrom += "_";
	infoshow.m_strFrom += info.happenHost;
	infoshow.locaInfo.level_logType = "报警日志";
	infoshow.locaInfo.level_logArea =info.happenArea;
	infoshow.locaInfo.level_logUnit = info.happenUnit;
	infoshow.locaInfo.level_logHost = info.happenHost;
	temp_show.push_back(infoshow);
	m_record->WriterAlarmLog(infoshow); //把信息存入可持久文件中

	
	//删除当前已被确认的报警信息
	for (vector<ALARMLOGINFO>::iterator it = tempSave.begin(); it != tempSave.end(); it++)
	{
		if (it->buttonID == currentButtonID)
		{
			tempSave.erase(it);
			break;
		}
	}

	//当没有报警信息时，删除主界面的闪烁图标
	
	if(tempSave.size()==0)
		CDlgAlarmPictureShow::s_pDlgAlarmPictureShow->ShowWindow(SW_HIDE);
	OnCancel();
}



void DlgAlarmInfoInterface::InitData()
{
	m_HappenTime = (CEdit *)GetDlgItem(IDC_happenTime);
	m_HappenArea = (CComboBox *)GetDlgItem(IDC_happenLocation);
	m_HappenUnit = (CComboBox *)GetDlgItem(IDC_hanppenUnit);
	m_SecurityOfficer = (CComboBox *)GetDlgItem(IDC_Security_Officer);
	m_Remark = (CEdit *)GetDlgItem(IDC_REMARK);

	CString strUserType;
	CString strUserName;
	vector<UserInfo> vecUser;
	m_SecurityOfficer->ResetContent();
	int vecSize = gCGData.GetUser(vecUser);
	for(int i = 0; i < vecSize; i++)		
	{
		strUserType = vecUser.at(i).user_type.c_str();
		if(strUserType =="管理员"){
			strUserName = vecUser.at(i).user_name.c_str();
			m_SecurityOfficer->AddString(strUserName);
		}
	}
	
	m_SecurityOfficer->SetCurSel(0);
	m_HappenTime->SetWindowText(info.happenTime.c_str());
	m_HappenArea->SetWindowText(info.happenArea.c_str());
	m_HappenArea->SetWindowText(info.happenUnit.c_str());
	currentButtonID = info.buttonID;
	getFloderImage(info.picturePath);
	
}

/*------------------------------我的名字叫分割线----------------------------------------*/
void DlgAlarmInfoInterface::SetAlarmData()
{
	alarmList = ((CListCtrl*)GetDlgItem(IDC_ALARM_LIST));
	char buf[20] ;
	int id = broadcastAlarmInfo;
	sprintf(buf,"%d",id);
	string name = hostInfo->strHostName;
	name += "_";
	name += buf;
	name += "_";
	getCurrentData(name);
	CTime  currentTime = CTime::GetCurrentTime();
	string timeFormat = currentTime.Format(_T("%Y-%m-%d %H:%M:%S"));
	CString rowNum;
	int cRow;
	rowNum.Format("%d",tempSave.size()+1);
	if(tempSave.size()==0)
	{
		cRow =alarmList->GetItemCount();
		alarmList->InsertItem(cRow,"");
		alarmList->SetItemText(cRow,0,hostInfo->strAreaName.c_str());
		alarmList->SetItemText(cRow,1,hostInfo->strUnitName.c_str());
		alarmList->SetItemText(cRow,2,hostInfo->strHostName.c_str());
		alarmList->SetItemText(cRow,3,timeFormat.c_str());
	}
	else
	{
		cRow =alarmList->GetItemCount();
		alarmList->InsertItem(cRow,"");
		alarmList->SetItemText(cRow,0,hostInfo->strAreaName.c_str());
		alarmList->SetItemText(cRow,1,hostInfo->strUnitName.c_str());
		alarmList->SetItemText(cRow,2,hostInfo->strHostName.c_str());
		alarmList->SetItemText(cRow,3,timeFormat.c_str());
	}
	info.buttonID = cRow;
	info.m_ipCameraLoginInfo = getIPCameraInfo(hostInfo->jTerminal);
	tempSave.push_back(info);
	

}





/*------------------------------我的名字叫分割线----------------------------------------*/
void DlgAlarmInfoInterface::AlarmPictureDraw(int pictureID)
{
	CRect rcClient;
	CDC dcMem;
	GetDlgItem(pictureID)->GetWindowRect(&rcClient); //让rcClient获得这个控件的rectt
	CPaintDC dc(GetDlgItem(pictureID));//获得这个控件的DC
	dcMem.CreateCompatibleDC(&dc);

	CBitmap *pOldBmp = dcMem.SelectObject(&m_bitmap);

	BITMAP bm;
	m_bitmap.GetBitmap(&bm);
	dc.SetStretchBltMode(HALFTONE);
	dc.StretchBlt(0, 0, rcClient.Width(), rcClient.Height(), &dcMem, 
		0, 0, bm.bmWidth, bm.bmHeight, SRCCOPY);
	dcMem.SelectObject(pOldBmp);
	dcMem.DeleteDC();
	pictureState = false;

	
}

/*------------------------------我的名字叫分割线----------------------------------------*/
//void DlgAlarmInfoInterface::onButtonClick(UINT n_ID)
//{
//	for (vector<ALARMLOGINFO>::iterator it = tempSave.begin(); it != tempSave.end(); it++)
//	{
//		if (it->buttonID == n_ID)
//		{
//			info = *it;
//			getFloderImage(it->picturePath);
//			m_HappenTime = (CEdit *)GetDlgItem(IDC_happenTime);
//			m_HappenLocation = (CEdit *)GetDlgItem(IDC_happenLocation);
//			currentButtonID = n_ID;
//			m_HappenTime->SetWindowText(it->happenTime.c_str());
//			m_HappenLocation->SetWindowText(it->happenLocation.c_str());
//			ipCameraInfo = it->m_ipCameraLoginInfo;
//			s_pDlgOneUnit->OnBnClickedBtnClose_alarm();
//			break;
//		}
//
//	}
//	this->UpdateWindow();
//}

/*------------------------------我的名字叫分割线----------------------------------------*/

void DlgAlarmInfoInterface::GetNextBigImg()
{
	char* pJpg;
	char* pBmp;
	char* pPng;
	char* pJPG;
	//prevPict.clear();
	for(int i=0;i<4;i++)
	{	
		
		m_pEnt=readdir(m_pDir);
		int err = GetLastError();
		if( m_pDir&& m_pEnt!=NULL)//readdir返回文件的名字，m_pDir这个变量会记录当前指针位置
		{//判断名字中有没有.jpg 即判断是否为图片文件
			 string path = info.picturePath;
			 pJpg=strstr(m_pEnt->d_name,".jpg");
			 if(pJpg){
				
				path.append(1,'\\');
				path.append(m_pEnt->d_name);
			
				prevPictPath = path ;	
			    prevPict.at(i).path =prevPictPath;
			}
		}
		
	}	

}


void DlgAlarmInfoInterface::PostNcDestroy()
{

		//delete this;
		
		CDialog::PostNcDestroy();
}



void DlgAlarmInfoInterface::OnCancel(){	

	s_pDlgOneUnit->OnBnClickedBtnClose_alarm();
	DestroyWindow(); 	
}

void DlgAlarmInfoInterface::OnPaint()
{
	CPaintDC dc(this); 
	if(pictureState){AlarmPictureDraw(pictureId);}

	CWnd::OnPaint();
}

void DlgAlarmInfoInterface::OnSysCommand(UINT nID, LPARAM lParam)
{
	CDialog::OnSysCommand(nID, lParam);
}



/*summary:显示上一张图片*/
void DlgAlarmInfoInterface::OnStnClickedpreviouspicture()
{
	//if(!prevPict.empty())
	//{
	//
	//	if(pictureLocation>0)
	//	{
	//		prvePictNum = pictureLocation;
	//		char t[4];
	//		string s;
	//		sprintf(t, "%d", prvePictNum++);
	//		s = t;
	//		s +="/4";
	//		GetDlgItem(IDC_CURRENT_PICT_NUM)->SetWindowText(s.c_str());
	//		ShowTheImgSet(const_cast<char*>(prevPict.at(--pictureLocation).c_str()));

	//	}
	//}

}


/*summary:显示下一张图片*/
void DlgAlarmInfoInterface::OnStnClickedPicDown()
{
	//if(!prevPict.empty())
	//{
	//	if(pictureLocation<prevPict.size()-1)
	//	{
	//		
	//		ShowTheImgSet(const_cast<char*>(prevPict.at(++pictureLocation).c_str()));
	//		nextPictNum =1;
	//			
	//		nextPictNum+= pictureLocation;
	//	
	//		char t[4];
	//		string s;
	//		sprintf(t, "%d", nextPictNum);
	//		s = t;
	//		s +="/4";
	//		GetDlgItem(IDC_CURRENT_PICT_NUM)->SetWindowText(s.c_str());
	//		//int er = GetLastError();
	//	}

	//}

}

	
void DlgAlarmInfoInterface::OnClose(){OnBnClickedconfirm();}


void DlgAlarmInfoInterface::OnBnClickedWatchAlarmVideo()
{
	//Json::Value valCam;
	//HWND m_wnd = AfxGetMainWnd()->m_hWnd;

	////CDlgVideoUnit* vu  =new CDlgVideoUnit();
	//::SetWindowPos(m_wnd,HWND_TOP,0,0,0,0,SWP_NOMOVE|SWP_NOSIZE);


	////m_ipCameraLoginInfo.port = 80;
	////m_ipCameraLoginInfo.addr ="192.168.1.88"; //alarmVideoIP;
	////m_ipCameraLoginInfo.pswd = "admin";
	////m_ipCameraLoginInfo.userName ="admin";
	////m_ipCameraLoginInfo.title = "办公室";
	//if(ipCameraInfo.port)
	//	ShowDlgVideoShow_OneUnit(TRUE, this, &ipCameraInfo);
	//else
	//	AfxMessageBox("没有获取到相关信息");
	getFloderImage("D:\\SVN\\server_alarm__\\bin\\A1_40_2016-08-28_17-58-54");
	
}


IPCameraLoginInfo DlgAlarmInfoInterface::getIPCameraInfo(Json::Value valCam)
{
	IPCameraLoginInfo m_ipCameraLoginInfo;
	//valCam = hostInfo->jTerminal;
	int iCount = valCam[DRIVER_INFO::JTERMINAL::DRIVER_COUNT].asInt();
	Json::Value driver_array = valCam[DRIVER_INFO::JTERMINAL::DRIVER_ARRAY];
	int iArrSize =  driver_array.size();

	if (iCount != iArrSize)
	{
		printf("数据不匹配!!!!!!!!!\n");
	}

	for (int i=0; i<iArrSize; i++)
	{
		if (driver_array[i][DRIVER_INFO::JTERMINAL::DRIVER_TYPE_JTERMINAL].asInt() == DRV_IPC)
		{
		/*	if(DlgAlarmInfoInterface::alarmVideoIP
				==driver_array[i][DRIVER_INFO::JTERMINAL::DRIVER_IP].asString())*/
			{
				m_ipCameraLoginInfo.port = driver_array[i]
				[DRIVER_INFO::JTERMINAL::DRIVER_PORT].asInt();
				m_ipCameraLoginInfo.addr = DlgAlarmInfoInterface::alarmVideoIP;
				m_ipCameraLoginInfo.userName = driver_array[i]
				[DRIVER_INFO::JTERMINAL::DRIVER_LOGINUSER].asString();
				m_ipCameraLoginInfo.pswd = driver_array[i]
				[DRIVER_INFO::JTERMINAL::DRIVER_LOGINPASS].asString();
				break;
			}			
		}
	}
	
	return m_ipCameraLoginInfo;
}

//系统自带的列表单击相应函数
void DlgAlarmInfoInterface::OnNMClickAlarmList(NMHDR *pNMHDR, LRESULT *pResult)
{
	//LPNMITEMACTIVATE pNMItemActivate = reinterpret_cast<LPNMITEMACTIVATE>(pNMHDR);
	NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;
	if(pNMListView->iItem != -1)
        {
			for (vector<ALARMLOGINFO>::iterator it = tempSave.begin(); it != tempSave.end(); it++)
			{
				if (it->buttonID == pNMListView->iItem)
				{
					info = *it;
					getFloderImage(it->picturePath);
					m_HappenTime = (CEdit *)GetDlgItem(IDC_happenTime);
					m_HappenArea = (CComboBox *)GetDlgItem(IDC_happenLocation);
					m_HappenUnit = (CComboBox *)GetDlgItem(IDC_hanppenUnit);
					currentButtonID = pNMListView->iItem;
					m_HappenTime->SetWindowText(it->happenTime.c_str());
					m_HappenArea->SetWindowText(info.happenArea.c_str());
					m_HappenArea->SetWindowText(info.happenUnit.c_str());
					ipCameraInfo = it->m_ipCameraLoginInfo;
					s_pDlgOneUnit->OnBnClickedBtnClose_alarm();
					break;
				}

			}
			this->UpdateWindow();
        }
	*pResult = 0;
}


void DlgAlarmInfoInterface::initPictureInfo()
{
	PICTUREINFORMATION pictInfo;
	CRect rec;
	rec.left =300;
	rec.top = 50;
	rec.right = 450;
	rec.bottom = 200;	
	
	pictInfo.pictControlID = IDC_sencePicture;
	pictInfo.size =rec;
	prevPict.push_back(pictInfo);
	
	pictInfo.pictControlID = IDC_AlarmPicture1;
	rec.left =500;
	rec.top = 50;
	rec.right = 650;
	rec.bottom = 200;
	pictInfo.size =rec;
	prevPict.push_back(pictInfo);
	
	pictInfo.pictControlID = IDC_ALARM_PICTURE2;
	rec.left =300;
	rec.top = 250;
	rec.right = 450;
	rec.bottom = 400;
	pictInfo.size =rec;
	prevPict.push_back(pictInfo);

	pictInfo.pictControlID = IDC_ALARM_PICTURE3;
	rec.left =500;
	rec.top = 250;
	rec.right = 650;
	rec.bottom = 400;
	pictInfo.size =rec;
	prevPict.push_back(pictInfo);
}
//void DlgAlarmInfoInterface::OnStnClickedsencepicture()
//{
//	// TODO: Add your control notification handler code here
//}
//
//void DlgAlarmInfoInterface::OnStnClickedAlarmpicture1()
//{
//	// TODO: Add your control notification handler code here
//}
